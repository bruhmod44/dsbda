In [1]:
 import numpy as np # linear algebra
 import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
 import matplotlib.pyplot as plt
 import seaborn as sns

 In [3]:iris= pd.read_csv(r"D:\College\TE\SEM-2\Practical\DSBDA\6\Iris.csv")
 In [4]: iris.head()
 In [5]:iris['Species'].unique()
 In [6]: iris.drop(columns="Id",inplace=True)
 In [7]:g=sns.relplot(x='SepalLengthCm',y='SepalWidthCm',data=iris,hue='Species',style='Species')
    	g.fig.set_size_inches(10,5)
    	plt.show()
In [8]: plt.figure(figsize=(15,10))
 	plt.subplot(2,2,1)
 	sns.violinplot(x='Species',y='PetalLengthCm',data=iris)
 	plt.subplot(2,2,2)
 	sns.violinplot(x='Species',y='PetalWidthCm',data=iris)
 	plt.subplot(2,2,3)
 	sns.violinplot(x='Species',y='SepalLengthCm',data=iris)
 	plt.subplot(2,2,4)
 	sns.violinplot(x='Species',y='SepalWidthCm',data=iris)
 	plt.show()

In [9]: plt.subplots(figsize=(10,7))
 	sns.violinplot(data=iris)
 	sns.swarmplot( data=iris)
 	plt.show()

In [10]:iris.plot.area(y=['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm'],alpha=0.4,figsize=(12, 6));
In [11]:  iris.corr()

In [12]:plt.subplots(figsize = (8,8))
       sns.heatmap(iris.corr(),annot=True,fmt=\"f\").set_title(\"Corelation of attributes (petal length,width and sepal length,width) among Iris species\")
       plt.show()

 In [13]: X=iris.iloc[:,0:4].values
 	  y=iris.iloc[:,4].values

 In [14]: from sklearn.preprocessing import LabelEncoder
 	  le = LabelEncoder()
 	  y = le.fit_transform(y)

In [18]:
 #Metrics
 from sklearn.metrics import make_scorer, accuracy_score,precision_score
 from sklearn.metrics import classification_report
 from sklearn.metrics import confusion_matrix
 from sklearn.metrics import accuracy_score ,precision_score,recall_score,f1_score
 #Model Select
 from sklearn.naive_bayes import GaussianNB

In [21]: from sklearn.model_selection import train_test_split

In [22]: #Train and Test split
 	 X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=0)

In [23]:
 gaussian = GaussianNB()
 gaussian.fit(X_train, y_train)
 Y_pred = gaussian.predict(X_test) 
accuracy_nb=round(accuracy_score(y_test,Y_pred)* 100, 2)
 acc_gaussian = round(gaussian.score(X_train, y_train) * 100, 2)
 cm = confusion_matrix(y_test, Y_pred)
 accuracy = accuracy_score(y_test,Y_pred)
 precision =precision_score(y_test, Y_pred,average='micro')
 recall =  recall_score(y_test, Y_pred,average='micro')
 f1 = f1_score(y_test,Y_pred,average='micro')
 print('Confusion matrix for Naive Bayes\n',cm)
 print('accuracy_Naive Bayes: %.3f' %accuracy)
 print('precision_Naive Bayes: %.3f' %precision)
 print('recall_Naive Bayes: %.3f' %recall)
 print('f1-score_Naive Bayes : %.3f' %f1)

   


   
